// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use crate::HeaderBar;
use crate::HeaderGroupChild;
use glib::object::Cast;
use glib::object::ObjectType as ObjectType_;
use glib::signal::connect_raw;
use glib::signal::SignalHandlerId;
use glib::translate::*;
use glib::StaticType;
use glib::ToValue;
use std::boxed::Box as Box_;
use std::fmt;
use std::mem::transmute;

glib::wrapper! {
    pub struct HeaderGroup(Object<ffi::AdwHeaderGroup, ffi::AdwHeaderGroupClass>) @implements gtk::Buildable;

    match fn {
        get_type => || ffi::adw_header_group_get_type(),
    }
}

impl HeaderGroup {
    #[doc(alias = "adw_header_group_new")]
    pub fn new() -> HeaderGroup {
        assert_initialized_main_thread!();
        unsafe { from_glib_full(ffi::adw_header_group_new()) }
    }

    #[doc(alias = "adw_header_group_add_gtk_header_bar")]
    pub fn add_gtk_header_bar(&self, header_bar: &gtk::HeaderBar) {
        unsafe {
            ffi::adw_header_group_add_gtk_header_bar(
                self.to_glib_none().0,
                header_bar.to_glib_none().0,
            );
        }
    }

    #[doc(alias = "adw_header_group_add_header_bar")]
    pub fn add_header_bar(&self, header_bar: &HeaderBar) {
        unsafe {
            ffi::adw_header_group_add_header_bar(
                self.to_glib_none().0,
                header_bar.to_glib_none().0,
            );
        }
    }

    #[doc(alias = "adw_header_group_add_header_group")]
    pub fn add_header_group(&self, header_group: &HeaderGroup) {
        unsafe {
            ffi::adw_header_group_add_header_group(
                self.to_glib_none().0,
                header_group.to_glib_none().0,
            );
        }
    }

    #[doc(alias = "adw_header_group_get_children")]
    pub fn get_children(&self) -> Vec<HeaderGroupChild> {
        unsafe {
            FromGlibPtrContainer::from_glib_none(ffi::adw_header_group_get_children(
                self.to_glib_none().0,
            ))
        }
    }

    #[doc(alias = "adw_header_group_get_decorate_all")]
    pub fn get_decorate_all(&self) -> bool {
        unsafe {
            from_glib(ffi::adw_header_group_get_decorate_all(
                self.to_glib_none().0,
            ))
        }
    }

    #[doc(alias = "adw_header_group_remove_child")]
    pub fn remove_child(&self, child: &HeaderGroupChild) {
        unsafe {
            ffi::adw_header_group_remove_child(self.to_glib_none().0, child.to_glib_none().0);
        }
    }

    #[doc(alias = "adw_header_group_remove_gtk_header_bar")]
    pub fn remove_gtk_header_bar(&self, header_bar: &gtk::HeaderBar) {
        unsafe {
            ffi::adw_header_group_remove_gtk_header_bar(
                self.to_glib_none().0,
                header_bar.to_glib_none().0,
            );
        }
    }

    #[doc(alias = "adw_header_group_remove_header_bar")]
    pub fn remove_header_bar(&self, header_bar: &HeaderBar) {
        unsafe {
            ffi::adw_header_group_remove_header_bar(
                self.to_glib_none().0,
                header_bar.to_glib_none().0,
            );
        }
    }

    #[doc(alias = "adw_header_group_remove_header_group")]
    pub fn remove_header_group(&self, header_group: &HeaderGroup) {
        unsafe {
            ffi::adw_header_group_remove_header_group(
                self.to_glib_none().0,
                header_group.to_glib_none().0,
            );
        }
    }

    #[doc(alias = "adw_header_group_set_decorate_all")]
    pub fn set_decorate_all(&self, decorate_all: bool) {
        unsafe {
            ffi::adw_header_group_set_decorate_all(self.to_glib_none().0, decorate_all.to_glib());
        }
    }

    pub fn connect_update_decoration_layouts<F: Fn(&HeaderGroup) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn update_decoration_layouts_trampoline<F: Fn(&HeaderGroup) + 'static>(
            this: *mut ffi::AdwHeaderGroup,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"update-decoration-layouts\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    update_decoration_layouts_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    pub fn connect_property_decorate_all_notify<F: Fn(&HeaderGroup) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_decorate_all_trampoline<F: Fn(&HeaderGroup) + 'static>(
            this: *mut ffi::AdwHeaderGroup,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::decorate-all\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_decorate_all_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }
}

impl Default for HeaderGroup {
    fn default() -> Self {
        Self::new()
    }
}

#[derive(Clone, Default)]
pub struct HeaderGroupBuilder {
    decorate_all: Option<bool>,
}

impl HeaderGroupBuilder {
    pub fn new() -> Self {
        Self::default()
    }

    pub fn build(self) -> HeaderGroup {
        let mut properties: Vec<(&str, &dyn ToValue)> = vec![];
        if let Some(ref decorate_all) = self.decorate_all {
            properties.push(("decorate-all", decorate_all));
        }
        let ret = glib::Object::new::<HeaderGroup>(&properties).expect("object new");
        ret
    }

    pub fn decorate_all(mut self, decorate_all: bool) -> Self {
        self.decorate_all = Some(decorate_all);
        self
    }
}

impl fmt::Display for HeaderGroup {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("HeaderGroup")
    }
}
