// This file was generated by gir (https://github.com/gtk-rs/gir)
// from
// from gir-files (https://github.com/gtk-rs/gir-files.git)
// DO NOT EDIT

use glib::{
    prelude::*,
    signal::{connect_raw, SignalHandlerId},
    translate::*,
};
use std::boxed::Box as Box_;

glib::wrapper! {
    #[doc(alias = "AdwLayout")]
    pub struct Layout(Object<ffi::AdwLayout, ffi::AdwLayoutClass>) @implements gtk::Buildable;

    match fn {
        type_ => || ffi::adw_layout_get_type(),
    }
}

impl Layout {
    #[doc(alias = "adw_layout_new")]
    pub fn new(content: &impl IsA<gtk::Widget>) -> Layout {
        assert_initialized_main_thread!();
        unsafe { from_glib_full(ffi::adw_layout_new(content.as_ref().to_glib_none().0)) }
    }

    // rustdoc-stripper-ignore-next
    /// Creates a new builder-pattern struct instance to construct [`Layout`] objects.
    ///
    /// This method returns an instance of [`LayoutBuilder`](crate::builders::LayoutBuilder) which can be used to create [`Layout`] objects.
    pub fn builder() -> LayoutBuilder {
        LayoutBuilder::new()
    }

    #[doc(alias = "adw_layout_get_content")]
    #[doc(alias = "get_content")]
    pub fn content(&self) -> gtk::Widget {
        unsafe { from_glib_none(ffi::adw_layout_get_content(self.to_glib_none().0)) }
    }

    #[doc(alias = "adw_layout_get_name")]
    #[doc(alias = "get_name")]
    pub fn name(&self) -> Option<glib::GString> {
        unsafe { from_glib_none(ffi::adw_layout_get_name(self.to_glib_none().0)) }
    }

    #[doc(alias = "adw_layout_set_name")]
    pub fn set_name(&self, name: Option<&str>) {
        unsafe {
            ffi::adw_layout_set_name(self.to_glib_none().0, name.to_glib_none().0);
        }
    }

    #[cfg(feature = "v1_6")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v1_6")))]
    #[doc(alias = "name")]
    pub fn connect_name_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_name_trampoline<F: Fn(&Layout) + 'static>(
            this: *mut ffi::AdwLayout,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::name\0".as_ptr() as *const _,
                Some(std::mem::transmute::<_, unsafe extern "C" fn()>(
                    notify_name_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }
}

#[cfg(feature = "v1_6")]
#[cfg_attr(docsrs, doc(cfg(feature = "v1_6")))]
impl Default for Layout {
    fn default() -> Self {
        glib::object::Object::new::<Self>()
    }
}

// rustdoc-stripper-ignore-next
/// A [builder-pattern] type to construct [`Layout`] objects.
///
/// [builder-pattern]: https://doc.rust-lang.org/1.0.0/style/ownership/builders.html
#[must_use = "The builder must be built to be used"]
pub struct LayoutBuilder {
    builder: glib::object::ObjectBuilder<'static, Layout>,
}

impl LayoutBuilder {
    fn new() -> Self {
        Self {
            builder: glib::object::Object::builder(),
        }
    }

    #[cfg(feature = "v1_6")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v1_6")))]
    pub fn content(self, content: &impl IsA<gtk::Widget>) -> Self {
        Self {
            builder: self.builder.property("content", content.clone().upcast()),
        }
    }

    #[cfg(feature = "v1_6")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v1_6")))]
    pub fn name(self, name: impl Into<glib::GString>) -> Self {
        Self {
            builder: self.builder.property("name", name.into()),
        }
    }

    // rustdoc-stripper-ignore-next
    /// Build the [`Layout`].
    #[must_use = "Building the object from the builder is usually expensive and is not expected to have side effects"]
    pub fn build(self) -> Layout {
        self.builder.build()
    }
}
