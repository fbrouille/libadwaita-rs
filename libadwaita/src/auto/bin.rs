// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use glib::object::Cast;
use glib::object::IsA;
use glib::signal::connect_raw;
use glib::signal::SignalHandlerId;
use glib::translate::*;
use std::boxed::Box as Box_;
use std::fmt;
use std::mem::transmute;

glib::wrapper! {
    pub struct Bin(Object<ffi::AdwBin, ffi::AdwBinClass>) @extends gtk::Widget, @implements gtk::Accessible, gtk::Buildable, gtk::ConstraintTarget;

    match fn {
        get_type => || ffi::adw_bin_get_type(),
    }
}

impl Bin {
    #[doc(alias = "adw_bin_new")]
    pub fn new() -> Bin {
        assert_initialized_main_thread!();
        unsafe { gtk::Widget::from_glib_none(ffi::adw_bin_new()).unsafe_cast() }
    }
}

impl Default for Bin {
    fn default() -> Self {
        Self::new()
    }
}

pub const NONE_BIN: Option<&Bin> = None;

pub trait BinExt: 'static {
    #[doc(alias = "adw_bin_get_child")]
    fn get_child(&self) -> Option<gtk::Widget>;

    #[doc(alias = "adw_bin_set_child")]
    fn set_child<P: IsA<gtk::Widget>>(&self, child: Option<&P>);

    fn connect_property_child_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<Bin>> BinExt for O {
    fn get_child(&self) -> Option<gtk::Widget> {
        unsafe { from_glib_none(ffi::adw_bin_get_child(self.as_ref().to_glib_none().0)) }
    }

    fn set_child<P: IsA<gtk::Widget>>(&self, child: Option<&P>) {
        unsafe {
            ffi::adw_bin_set_child(
                self.as_ref().to_glib_none().0,
                child.map(|p| p.as_ref()).to_glib_none().0,
            );
        }
    }

    fn connect_property_child_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_child_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut ffi::AdwBin,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) where
            P: IsA<Bin>,
        {
            let f: &F = &*(f as *const F);
            f(&Bin::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::child\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_child_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }
}

impl fmt::Display for Bin {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("Bin")
    }
}
