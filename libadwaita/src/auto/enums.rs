// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files.git)
// DO NOT EDIT

use glib::translate::*;
use glib::value::FromValue;
use glib::value::FromValueOptional;
use glib::value::SetValue;
use glib::StaticType;
use glib::Type;
use std::fmt;

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Clone, Copy)]
#[non_exhaustive]
#[doc(alias = "AdwCenteringPolicy")]
pub enum CenteringPolicy {
    #[doc(alias = "ADW_CENTERING_POLICY_LOOSE")]
    Loose,
    #[doc(alias = "ADW_CENTERING_POLICY_STRICT")]
    Strict,
    #[doc(hidden)]
    __Unknown(i32),
}

impl fmt::Display for CenteringPolicy {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(
            f,
            "CenteringPolicy::{}",
            match *self {
                CenteringPolicy::Loose => "Loose",
                CenteringPolicy::Strict => "Strict",
                _ => "Unknown",
            }
        )
    }
}

#[doc(hidden)]
impl ToGlib for CenteringPolicy {
    type GlibType = ffi::AdwCenteringPolicy;

    fn to_glib(&self) -> ffi::AdwCenteringPolicy {
        match *self {
            CenteringPolicy::Loose => ffi::ADW_CENTERING_POLICY_LOOSE,
            CenteringPolicy::Strict => ffi::ADW_CENTERING_POLICY_STRICT,
            CenteringPolicy::__Unknown(value) => value,
        }
    }
}

#[doc(hidden)]
impl FromGlib<ffi::AdwCenteringPolicy> for CenteringPolicy {
    unsafe fn from_glib(value: ffi::AdwCenteringPolicy) -> Self {
        skip_assert_initialized!();
        match value {
            0 => CenteringPolicy::Loose,
            1 => CenteringPolicy::Strict,
            value => CenteringPolicy::__Unknown(value),
        }
    }
}

impl StaticType for CenteringPolicy {
    fn static_type() -> Type {
        unsafe { from_glib(ffi::adw_centering_policy_get_type()) }
    }
}

impl<'a> FromValueOptional<'a> for CenteringPolicy {
    unsafe fn from_value_optional(value: &glib::Value) -> Option<Self> {
        Some(FromValue::from_value(value))
    }
}

impl<'a> FromValue<'a> for CenteringPolicy {
    unsafe fn from_value(value: &glib::Value) -> Self {
        from_glib(glib::gobject_ffi::g_value_get_enum(value.to_glib_none().0))
    }
}

impl SetValue for CenteringPolicy {
    unsafe fn set_value(value: &mut glib::Value, this: &Self) {
        glib::gobject_ffi::g_value_set_enum(value.to_glib_none_mut().0, this.to_glib())
    }
}

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Clone, Copy)]
#[non_exhaustive]
#[doc(alias = "AdwFlapFoldPolicy")]
pub enum FlapFoldPolicy {
    #[doc(alias = "ADW_FLAP_FOLD_POLICY_NEVER")]
    Never,
    #[doc(alias = "ADW_FLAP_FOLD_POLICY_ALWAYS")]
    Always,
    #[doc(alias = "ADW_FLAP_FOLD_POLICY_AUTO")]
    Auto,
    #[doc(hidden)]
    __Unknown(i32),
}

impl fmt::Display for FlapFoldPolicy {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(
            f,
            "FlapFoldPolicy::{}",
            match *self {
                FlapFoldPolicy::Never => "Never",
                FlapFoldPolicy::Always => "Always",
                FlapFoldPolicy::Auto => "Auto",
                _ => "Unknown",
            }
        )
    }
}

#[doc(hidden)]
impl ToGlib for FlapFoldPolicy {
    type GlibType = ffi::AdwFlapFoldPolicy;

    fn to_glib(&self) -> ffi::AdwFlapFoldPolicy {
        match *self {
            FlapFoldPolicy::Never => ffi::ADW_FLAP_FOLD_POLICY_NEVER,
            FlapFoldPolicy::Always => ffi::ADW_FLAP_FOLD_POLICY_ALWAYS,
            FlapFoldPolicy::Auto => ffi::ADW_FLAP_FOLD_POLICY_AUTO,
            FlapFoldPolicy::__Unknown(value) => value,
        }
    }
}

#[doc(hidden)]
impl FromGlib<ffi::AdwFlapFoldPolicy> for FlapFoldPolicy {
    unsafe fn from_glib(value: ffi::AdwFlapFoldPolicy) -> Self {
        skip_assert_initialized!();
        match value {
            0 => FlapFoldPolicy::Never,
            1 => FlapFoldPolicy::Always,
            2 => FlapFoldPolicy::Auto,
            value => FlapFoldPolicy::__Unknown(value),
        }
    }
}

impl StaticType for FlapFoldPolicy {
    fn static_type() -> Type {
        unsafe { from_glib(ffi::adw_flap_fold_policy_get_type()) }
    }
}

impl<'a> FromValueOptional<'a> for FlapFoldPolicy {
    unsafe fn from_value_optional(value: &glib::Value) -> Option<Self> {
        Some(FromValue::from_value(value))
    }
}

impl<'a> FromValue<'a> for FlapFoldPolicy {
    unsafe fn from_value(value: &glib::Value) -> Self {
        from_glib(glib::gobject_ffi::g_value_get_enum(value.to_glib_none().0))
    }
}

impl SetValue for FlapFoldPolicy {
    unsafe fn set_value(value: &mut glib::Value, this: &Self) {
        glib::gobject_ffi::g_value_set_enum(value.to_glib_none_mut().0, this.to_glib())
    }
}

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Clone, Copy)]
#[non_exhaustive]
#[doc(alias = "AdwFlapTransitionType")]
pub enum FlapTransitionType {
    #[doc(alias = "ADW_FLAP_TRANSITION_TYPE_OVER")]
    Over,
    #[doc(alias = "ADW_FLAP_TRANSITION_TYPE_UNDER")]
    Under,
    #[doc(alias = "ADW_FLAP_TRANSITION_TYPE_SLIDE")]
    Slide,
    #[doc(hidden)]
    __Unknown(i32),
}

impl fmt::Display for FlapTransitionType {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(
            f,
            "FlapTransitionType::{}",
            match *self {
                FlapTransitionType::Over => "Over",
                FlapTransitionType::Under => "Under",
                FlapTransitionType::Slide => "Slide",
                _ => "Unknown",
            }
        )
    }
}

#[doc(hidden)]
impl ToGlib for FlapTransitionType {
    type GlibType = ffi::AdwFlapTransitionType;

    fn to_glib(&self) -> ffi::AdwFlapTransitionType {
        match *self {
            FlapTransitionType::Over => ffi::ADW_FLAP_TRANSITION_TYPE_OVER,
            FlapTransitionType::Under => ffi::ADW_FLAP_TRANSITION_TYPE_UNDER,
            FlapTransitionType::Slide => ffi::ADW_FLAP_TRANSITION_TYPE_SLIDE,
            FlapTransitionType::__Unknown(value) => value,
        }
    }
}

#[doc(hidden)]
impl FromGlib<ffi::AdwFlapTransitionType> for FlapTransitionType {
    unsafe fn from_glib(value: ffi::AdwFlapTransitionType) -> Self {
        skip_assert_initialized!();
        match value {
            0 => FlapTransitionType::Over,
            1 => FlapTransitionType::Under,
            2 => FlapTransitionType::Slide,
            value => FlapTransitionType::__Unknown(value),
        }
    }
}

impl StaticType for FlapTransitionType {
    fn static_type() -> Type {
        unsafe { from_glib(ffi::adw_flap_transition_type_get_type()) }
    }
}

impl<'a> FromValueOptional<'a> for FlapTransitionType {
    unsafe fn from_value_optional(value: &glib::Value) -> Option<Self> {
        Some(FromValue::from_value(value))
    }
}

impl<'a> FromValue<'a> for FlapTransitionType {
    unsafe fn from_value(value: &glib::Value) -> Self {
        from_glib(glib::gobject_ffi::g_value_get_enum(value.to_glib_none().0))
    }
}

impl SetValue for FlapTransitionType {
    unsafe fn set_value(value: &mut glib::Value, this: &Self) {
        glib::gobject_ffi::g_value_set_enum(value.to_glib_none_mut().0, this.to_glib())
    }
}

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Clone, Copy)]
#[non_exhaustive]
#[doc(alias = "AdwLeafletTransitionType")]
pub enum LeafletTransitionType {
    #[doc(alias = "ADW_LEAFLET_TRANSITION_TYPE_OVER")]
    Over,
    #[doc(alias = "ADW_LEAFLET_TRANSITION_TYPE_UNDER")]
    Under,
    #[doc(alias = "ADW_LEAFLET_TRANSITION_TYPE_SLIDE")]
    Slide,
    #[doc(hidden)]
    __Unknown(i32),
}

impl fmt::Display for LeafletTransitionType {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(
            f,
            "LeafletTransitionType::{}",
            match *self {
                LeafletTransitionType::Over => "Over",
                LeafletTransitionType::Under => "Under",
                LeafletTransitionType::Slide => "Slide",
                _ => "Unknown",
            }
        )
    }
}

#[doc(hidden)]
impl ToGlib for LeafletTransitionType {
    type GlibType = ffi::AdwLeafletTransitionType;

    fn to_glib(&self) -> ffi::AdwLeafletTransitionType {
        match *self {
            LeafletTransitionType::Over => ffi::ADW_LEAFLET_TRANSITION_TYPE_OVER,
            LeafletTransitionType::Under => ffi::ADW_LEAFLET_TRANSITION_TYPE_UNDER,
            LeafletTransitionType::Slide => ffi::ADW_LEAFLET_TRANSITION_TYPE_SLIDE,
            LeafletTransitionType::__Unknown(value) => value,
        }
    }
}

#[doc(hidden)]
impl FromGlib<ffi::AdwLeafletTransitionType> for LeafletTransitionType {
    unsafe fn from_glib(value: ffi::AdwLeafletTransitionType) -> Self {
        skip_assert_initialized!();
        match value {
            0 => LeafletTransitionType::Over,
            1 => LeafletTransitionType::Under,
            2 => LeafletTransitionType::Slide,
            value => LeafletTransitionType::__Unknown(value),
        }
    }
}

impl StaticType for LeafletTransitionType {
    fn static_type() -> Type {
        unsafe { from_glib(ffi::adw_leaflet_transition_type_get_type()) }
    }
}

impl<'a> FromValueOptional<'a> for LeafletTransitionType {
    unsafe fn from_value_optional(value: &glib::Value) -> Option<Self> {
        Some(FromValue::from_value(value))
    }
}

impl<'a> FromValue<'a> for LeafletTransitionType {
    unsafe fn from_value(value: &glib::Value) -> Self {
        from_glib(glib::gobject_ffi::g_value_get_enum(value.to_glib_none().0))
    }
}

impl SetValue for LeafletTransitionType {
    unsafe fn set_value(value: &mut glib::Value, this: &Self) {
        glib::gobject_ffi::g_value_set_enum(value.to_glib_none_mut().0, this.to_glib())
    }
}

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Clone, Copy)]
#[non_exhaustive]
#[doc(alias = "AdwNavigationDirection")]
pub enum NavigationDirection {
    #[doc(alias = "ADW_NAVIGATION_DIRECTION_BACK")]
    Back,
    #[doc(alias = "ADW_NAVIGATION_DIRECTION_FORWARD")]
    Forward,
    #[doc(hidden)]
    __Unknown(i32),
}

impl fmt::Display for NavigationDirection {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(
            f,
            "NavigationDirection::{}",
            match *self {
                NavigationDirection::Back => "Back",
                NavigationDirection::Forward => "Forward",
                _ => "Unknown",
            }
        )
    }
}

#[doc(hidden)]
impl ToGlib for NavigationDirection {
    type GlibType = ffi::AdwNavigationDirection;

    fn to_glib(&self) -> ffi::AdwNavigationDirection {
        match *self {
            NavigationDirection::Back => ffi::ADW_NAVIGATION_DIRECTION_BACK,
            NavigationDirection::Forward => ffi::ADW_NAVIGATION_DIRECTION_FORWARD,
            NavigationDirection::__Unknown(value) => value,
        }
    }
}

#[doc(hidden)]
impl FromGlib<ffi::AdwNavigationDirection> for NavigationDirection {
    unsafe fn from_glib(value: ffi::AdwNavigationDirection) -> Self {
        skip_assert_initialized!();
        match value {
            0 => NavigationDirection::Back,
            1 => NavigationDirection::Forward,
            value => NavigationDirection::__Unknown(value),
        }
    }
}

impl StaticType for NavigationDirection {
    fn static_type() -> Type {
        unsafe { from_glib(ffi::adw_navigation_direction_get_type()) }
    }
}

impl<'a> FromValueOptional<'a> for NavigationDirection {
    unsafe fn from_value_optional(value: &glib::Value) -> Option<Self> {
        Some(FromValue::from_value(value))
    }
}

impl<'a> FromValue<'a> for NavigationDirection {
    unsafe fn from_value(value: &glib::Value) -> Self {
        from_glib(glib::gobject_ffi::g_value_get_enum(value.to_glib_none().0))
    }
}

impl SetValue for NavigationDirection {
    unsafe fn set_value(value: &mut glib::Value, this: &Self) {
        glib::gobject_ffi::g_value_set_enum(value.to_glib_none_mut().0, this.to_glib())
    }
}

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Clone, Copy)]
#[non_exhaustive]
#[doc(alias = "AdwSqueezerTransitionType")]
pub enum SqueezerTransitionType {
    #[doc(alias = "ADW_SQUEEZER_TRANSITION_TYPE_NONE")]
    None,
    #[doc(alias = "ADW_SQUEEZER_TRANSITION_TYPE_CROSSFADE")]
    Crossfade,
    #[doc(hidden)]
    __Unknown(i32),
}

impl fmt::Display for SqueezerTransitionType {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(
            f,
            "SqueezerTransitionType::{}",
            match *self {
                SqueezerTransitionType::None => "None",
                SqueezerTransitionType::Crossfade => "Crossfade",
                _ => "Unknown",
            }
        )
    }
}

#[doc(hidden)]
impl ToGlib for SqueezerTransitionType {
    type GlibType = ffi::AdwSqueezerTransitionType;

    fn to_glib(&self) -> ffi::AdwSqueezerTransitionType {
        match *self {
            SqueezerTransitionType::None => ffi::ADW_SQUEEZER_TRANSITION_TYPE_NONE,
            SqueezerTransitionType::Crossfade => ffi::ADW_SQUEEZER_TRANSITION_TYPE_CROSSFADE,
            SqueezerTransitionType::__Unknown(value) => value,
        }
    }
}

#[doc(hidden)]
impl FromGlib<ffi::AdwSqueezerTransitionType> for SqueezerTransitionType {
    unsafe fn from_glib(value: ffi::AdwSqueezerTransitionType) -> Self {
        skip_assert_initialized!();
        match value {
            0 => SqueezerTransitionType::None,
            1 => SqueezerTransitionType::Crossfade,
            value => SqueezerTransitionType::__Unknown(value),
        }
    }
}

impl StaticType for SqueezerTransitionType {
    fn static_type() -> Type {
        unsafe { from_glib(ffi::adw_squeezer_transition_type_get_type()) }
    }
}

impl<'a> FromValueOptional<'a> for SqueezerTransitionType {
    unsafe fn from_value_optional(value: &glib::Value) -> Option<Self> {
        Some(FromValue::from_value(value))
    }
}

impl<'a> FromValue<'a> for SqueezerTransitionType {
    unsafe fn from_value(value: &glib::Value) -> Self {
        from_glib(glib::gobject_ffi::g_value_get_enum(value.to_glib_none().0))
    }
}

impl SetValue for SqueezerTransitionType {
    unsafe fn set_value(value: &mut glib::Value, this: &Self) {
        glib::gobject_ffi::g_value_set_enum(value.to_glib_none_mut().0, this.to_glib())
    }
}

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Clone, Copy)]
#[non_exhaustive]
#[doc(alias = "AdwViewSwitcherPolicy")]
pub enum ViewSwitcherPolicy {
    #[doc(alias = "ADW_VIEW_SWITCHER_POLICY_AUTO")]
    Auto,
    #[doc(alias = "ADW_VIEW_SWITCHER_POLICY_NARROW")]
    Narrow,
    #[doc(alias = "ADW_VIEW_SWITCHER_POLICY_WIDE")]
    Wide,
    #[doc(hidden)]
    __Unknown(i32),
}

impl fmt::Display for ViewSwitcherPolicy {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(
            f,
            "ViewSwitcherPolicy::{}",
            match *self {
                ViewSwitcherPolicy::Auto => "Auto",
                ViewSwitcherPolicy::Narrow => "Narrow",
                ViewSwitcherPolicy::Wide => "Wide",
                _ => "Unknown",
            }
        )
    }
}

#[doc(hidden)]
impl ToGlib for ViewSwitcherPolicy {
    type GlibType = ffi::AdwViewSwitcherPolicy;

    fn to_glib(&self) -> ffi::AdwViewSwitcherPolicy {
        match *self {
            ViewSwitcherPolicy::Auto => ffi::ADW_VIEW_SWITCHER_POLICY_AUTO,
            ViewSwitcherPolicy::Narrow => ffi::ADW_VIEW_SWITCHER_POLICY_NARROW,
            ViewSwitcherPolicy::Wide => ffi::ADW_VIEW_SWITCHER_POLICY_WIDE,
            ViewSwitcherPolicy::__Unknown(value) => value,
        }
    }
}

#[doc(hidden)]
impl FromGlib<ffi::AdwViewSwitcherPolicy> for ViewSwitcherPolicy {
    unsafe fn from_glib(value: ffi::AdwViewSwitcherPolicy) -> Self {
        skip_assert_initialized!();
        match value {
            0 => ViewSwitcherPolicy::Auto,
            1 => ViewSwitcherPolicy::Narrow,
            2 => ViewSwitcherPolicy::Wide,
            value => ViewSwitcherPolicy::__Unknown(value),
        }
    }
}

impl StaticType for ViewSwitcherPolicy {
    fn static_type() -> Type {
        unsafe { from_glib(ffi::adw_view_switcher_policy_get_type()) }
    }
}

impl<'a> FromValueOptional<'a> for ViewSwitcherPolicy {
    unsafe fn from_value_optional(value: &glib::Value) -> Option<Self> {
        Some(FromValue::from_value(value))
    }
}

impl<'a> FromValue<'a> for ViewSwitcherPolicy {
    unsafe fn from_value(value: &glib::Value) -> Self {
        from_glib(glib::gobject_ffi::g_value_get_enum(value.to_glib_none().0))
    }
}

impl SetValue for ViewSwitcherPolicy {
    unsafe fn set_value(value: &mut glib::Value, this: &Self) {
        glib::gobject_ffi::g_value_set_enum(value.to_glib_none_mut().0, this.to_glib())
    }
}
